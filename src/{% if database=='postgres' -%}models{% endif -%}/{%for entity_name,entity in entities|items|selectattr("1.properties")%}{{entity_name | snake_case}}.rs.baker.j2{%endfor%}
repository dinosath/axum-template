{% import "macros.jinja" as macros %}
{% set file_name = entity_name | snake_case -%}
{% set table_name = entity_name | table_case -%}
{% set module_name = file_name | pascal_case -%}
use sea_orm::entity::prelude::*;
{% set m2m_relationships = entity.properties | items | selectattr('1.x-relationship', 'equalto', 'many-to-many') | map(attribute='0') -%}

{% for name,property in entity.properties | items | selectattr('1.enum') -%}
#[derive(PartialEq, Clone, Debug, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize, ToSchema)]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::None)", enum_name = "{{ name | snake_case }}")]
enum {{ name | pascal_case }}{
        {% for enum in property.enum -%}
        #[sea_orm(string_value = "{{ enum | snake_case }}")]
        {{ macros.rust_var(enum,true) }}{%- if not loop.last -%},{% endif -%}
        {% endfor %}
}
{% endfor -%}

#[sea_orm::model]
#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "{{ table_name }}")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_at: DateTime,
    pub last_updated: DateTime,
    {% for name, property in entity.properties | items -%}
    {% if property and property['x-unique'] -%}
    #[sea_orm(unique)]
    {% endif -%}
    {% if macros.relation_is_many_to_many(property)=='true' -%}
    #[sea_orm(has_many/*, via = "{{ macros.get_m2m_relation_model(entity_name,property) | snake_case }}" */)]
    {% elif macros.relation_is_one_to_many(property)=='true' -%}
    #[sea_orm(has_many)]
    {% elif macros.relation_is_many_to_one(property)=='true' -%}
    #[sea_orm(unique)]
    pub {{name}}_id: i32,
    #[sea_orm(belongs_to, from = "{{name}}_id", to = "id")]
    {% endif -%}
    pub {{ macros.rust_var(name,false) }}: {{ macros.get_rust_type(name, property, name in entity.required) }}
    {%- if not loop.last -%},{% endif %}
    {% endfor %}
}

impl ActiveModelBehavior for ActiveModel {}